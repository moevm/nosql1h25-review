from django.shortcuts import render
from django.http import JsonResponse
from django.views.generic import TemplateView
from pymongo import MongoClient
from django.conf import settings
from datetime import datetime
from django.views.generic.edit import FormView
from django.contrib.auth import login
from django.urls import reverse_lazy
from . import forms
from . import models
from mongoengine.errors import DoesNotExist


class HomepageView(TemplateView):
    template_name = 'core/homepage.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        client = MongoClient(settings.MONGODB_URI)
        db = client[settings.MONGODB_NAME]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é PS5)
        platform = self.request.GET.get('platform', 'PS5')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
        new_releases_pipeline = [
            {"$lookup": {
                "from": "critic_reviews",
                "localField": "_id",
                "foreignField": "game_id",
                "as": "critic_reviews"
            }},
            {"$project": {
                "_id": 1,
                "title": 1,
                "image_ref": 1,
                "release_date": 1,
                "platforms": 1,
                "avg_rating": {"$avg": "$critic_reviews.rating"}
            }},
            {"$sort": {"release_date": -1}},
            {"$limit": 8}
        ]
        
        new_releases = list(db.games.aggregate(new_releases_pipeline))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∏–≥—Ä –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        best_platform_games_pipeline = [
            {"$match": {"platforms": {"$regex": platform, "$options": "i"}}},
            {"$lookup": {
                "from": "critic_reviews",
                "localField": "_id",
                "foreignField": "game_id",
                "as": "critic_reviews"
            }},
            {"$project": {
                "_id": 1,
                "title": 1,
                "image_ref": 1,
                "release_date": 1,
                "platforms": 1,
                "avg_rating": {"$avg": "$critic_reviews.rating"}
            }},
            {"$match": {"avg_rating": {"$gte": 85}}},  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –∏–≥—Ä
            {"$sort": {"avg_rating": -1}},
            {"$limit": 8}
        ]
        
        best_platform_games = list(db.games.aggregate(best_platform_games_pipeline))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        all_platforms = [
            "PS5", "PC", "Nintendo Switch", "PS4", "Xbox Series X", "Xbox One"
        ]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        for game in new_releases + best_platform_games:
            game['id'] = str(game['_id'])  # üí° –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π id –¥–ª—è —à–∞–±–ª–æ–Ω–∞

            if 'release_date' in game and game['release_date']:
                if isinstance(game['release_date'], str):
                    try:
                        game['release_date'] = datetime.strptime(game['release_date'], '%Y-%m-%d')
                    except ValueError:
                        pass

            if 'avg_rating' in game and game['avg_rating']:
                game['avg_rating_display'] = round(game['avg_rating'])

        context.update({
            'new_releases': new_releases,
            'best_platform_games': best_platform_games,
            'current_platform': platform,
            'all_platforms': all_platforms,
            'page_title': 'GameScore - –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫ –≤–∏–¥–µ–æ–∏–≥—Ä',
        })
        
        return context


class LoginView(FormView):
    template_name = 'registration/login.html'
    form_class = forms.EmailAuthenticationForm

    def form_valid(self, form):
        login(self.request, form.get_user())

        if self.request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse({
                'success': True,
                'redirect_url': self.get_success_url(),
                'user': {
                    'is_authenticated': True,
                    'username': form.get_user().username
                }
            })
        return super().form_valid(form)

    def form_invalid(self, form):
        if self.request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse({
                'success': False,
                'error': form.errors.get('__all__', ['–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'])[0]
            }, status=400)
        return super().form_invalid(form)